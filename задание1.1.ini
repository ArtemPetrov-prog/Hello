class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_details(self):
        return f"Name: {self.name}, Age: {self.age}"


class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id
        self.courses = {}  # Словарь: {course: grade}

    def enroll_course(self, course):
        if course in self.courses:
            print(f"Студент {self.name} уже зачислен на курс {course.name}.")
            return
        self.courses[course] = None  # Зачисляем студента без оценки
        course.add_student(self)  # Добавляем студента в список курса
        print(f"Студент {self.name} зачислен на курс {course.name}.")

    def drop_course(self, course):
        if course in self.courses:
            del self.courses[course]
            course.remove_student(self)
            print(f"Студент {self.name} отчислен с курса {course.name}.")
        else:
            print(f"Студент {self.name} не зачислен на курс {course.name}.")

    def set_grade(self, course, grade):
        if course in self.courses:
            if 0 <= grade <= 100: # Оценка по 100 бальной шкале
                self.courses[course] = grade
                print(f"Студенту {self.name} выставлена оценка {grade} на курсе {course.name}.")
            else:
                 print("Оценка должна быть в диапазоне от 0 до 100")
        else:
            print(f"Студент {self.name} не зачислен на курс {course.name}.")

    def get_average_grade(self):
        total_grade = 0
        count = 0
        for grade in self.courses.values():
            if grade is not None:
                total_grade += grade
                count += 1
        if count > 0:
            return total_grade / count
        else:
            return "Нет оценок"

    def get_details(self):
        details = super().get_details()
        courses_list = ", ".join([f"{course.name}: {grade if grade is not None else 'Нет оценки'}" for course, grade in self.courses.items()]) # Форматирование
        return f"{details}, Student ID: {self.student_id}, Курсы: {courses_list or 'Не зачислен на курсы'}, Средний балл: {self.get_average_grade()}"


class Teacher(Person):
    def __init__(self, name, age, employee_id, department):
        super().__init__(name, age)
        self.employee_id = employee_id
        self.department = department
        self.courses = []  # Список курсов, которые ведет преподаватель

    def assign_course(self, course):
        if course not in self.courses:
            self.courses.append(course)
            course.teacher = self # Устанавливаем преподавателя курса
            print(f"Преподавателю {self.name} назначен курс {course.name}.")
        else:
            print(f"Преподаватель {self.name} уже ведет курс {course.name}.")

    def get_details(self):
        details = super().get_details()
        courses_list = ", ".join([course.name for course in self.courses])
        return f"{details}, Employee ID: {self.employee_id}, Отдел: {self.department}, Курсы: {courses_list or 'Не ведет курсы'}"


class Course:
    def __init__(self, name, course_code, max_students):
        self.name = name
        self.course_code = course_code
        self.max_students = max_students
        self.students = [] # Список зачисленных студентов
        self.teacher = None # Преподаватель, ведущий курс

    def add_student(self, student):
        if len(self.students) < self.max_students:
            self.students.append(student)
        else:
            print(f"Курс {self.name} переполнен.  Невозможно зачислить студента.")

    def remove_student(self, student):
        if student in self.students:
            self.students.remove(student)
        else:
            print(f"Студент {student.name} не зачислен на этот курс и не может быть отчислен.")


    def enroll_student(self, student):  # Обновленный метод зачисления
        if len(self.students) < self.max_students:
            student.enroll_course(self)  # Зачисляем студента на курс
        else:
            print(f"Курс {self.name} переполнен. Невозможно зачислить студента {student.name}.")

    def get_details(self):
        students_list = ", ".join([student.name for student in self.students])
        teacher_name = self.teacher.name if self.teacher else "Не назначен"
        return f"Курс: {self.name}, Код: {self.course_code}, Макс. студентов: {self.max_students}, Студенты: {students_list or 'Нет студентов'}, Преподаватель: {teacher_name}"



# Пример использования
if __name__ == "__main__":

    # Создание экземпляров преподавателей
    teacher1 = Teacher("Иван Петров", 45, "EMP123", "Информационные технологии")
    teacher2 = Teacher("Мария Сидорова", 38, "EMP456", "Математика")

    # Создание экземпляров студентов
    student1 = Student("Анна Смирнова", 20, "STU001")
    student2 = Student("Петр Иванов", 21, "STU002")
    student3 = Student("Елена Козлова", 19, "STU003")

    # Создание экземпляров курсов
    course1 = Course("Введение в программирование", "CS101", 2)
    course2 = Course("Математический анализ", "MA201", 3)

    # Назначение курсов преподавателям
    teacher1.assign_course(course1)
    teacher2.assign_course(course2)

    # Зачисление студентов на курсы
    course1.enroll_student(student1)
    course1.enroll_student(student2)
    course1.enroll_student(student1)  # Попытка зачислить повторно
    course1.enroll_student(student3)  # Попытка зачислить на переполненный курс

    course2.enroll_student(student1)
    course2.enroll_student(student2)
    course2.enroll_student(student3)

    # Отчисление студента с курса
    student1.drop_course(course2)

    # Выставление оценок
    student1.set_grade(course1, 95)
    student2.set_grade(course1, 80)
    student2.set_grade(course2, 101)  # Недопустимая оценка
    student3.set_grade(course2, 70)

    # Вывод информации
    print("\nИнформация о преподавателях:")
    print(teacher1.get_details())
    print(teacher2.get_details())

    print("\nИнформация о студентах:")
    print(student1.get_details())
    print(student2.get_details())
    print(student3.get_details())

    print("\nИнформация о курсах:")
    print(course1.get_details())
    print(course2.get_details())