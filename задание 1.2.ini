class BankAccount:
    def __init__(self, owner, initial_balance=0):
        self.owner = owner
        self.__balance = initial_balance  # приватное свойство

    def deposit(self, amount):  # метод для внесения депозита
        self.__balance += amount
        print(f"Вы внесли {amount} руб. Ваш текущий баланс: {self.__balance} руб.")

    def check_balance(self):
        print(f"Ваш текущий баланс: {self.__balance} руб.")

    def transfer(self, amount, recipient):
        if self.__balance >= amount:
            self.__balance -= amount
            recipient.deposit(amount)  # Депозит на счет получателя (внешний метод)
            print(f"Вы перевели {amount} руб. на счет {recipient.owner}. Ваш текущий баланс: {self.__balance} руб.")
        else:
            print("Недостаточно средств для перевода.")

    def __str__(self): # Для отладки и удобства
        return f"Счет пользователя {self.owner}, баланс: {self.__balance}"


def sufficient_funds(func):
    def wrapper(self, amount, *args, **kwargs):
        if amount > self.__balance:
            print("Недостаточно средств")
        else:
            return func(self, amount, *args, **kwargs)
    return wrapper


class BankAccount:
    def __init__(self, owner, initial_balance=0):
        self.owner = owner
        self.__balance = initial_balance

    def deposit(self, amount):
        self.__balance += amount
        print(f"Вы внесли {amount}руб. Ваш текущий баланс: {self.__balance}руб.")

    @sufficient_funds #Применение декоратора к методу withdraw.
    def withdraw(self, amount):
        self.__balance -= amount
        print(f"Вы сняли {amount}руб. Ваш текущий баланс: {self.__balance}руб.")

    def check_balance(self):
        print(f"Ваш текущий баланс: {self.__balance}руб.")

    def transfer(self, amount, recipient):
        if self.__balance >= amount:
            self.__balance -= amount
            recipient.deposit(amount)
            print(f"Вы перевели {amount}руб. на счет {recipient.owner}. Ваш текущий баланс: {self.__balance}руб.")
        else:
            print("Недостаточно средств для перевода.")

def main():
    account1 = BankAccount("Пользователь 1", 1000)
    account2 = BankAccount("Пользователь 2", 500)

    while True:
        print("\nВыберите действие:")
        print("1: Проверить баланс")
        print("2: Внести сумму")
        print("3: Снять сумму")
        print("4: Перевести сумму другому пользователю")
        print("5: Выход")

        choice = input("> ")

        if choice == "1":
            account1.check_balance()

        elif choice == "2":
            amount = float(input("Введите сумму для внесения: "))
            account1.deposit(amount)

        elif choice == "3":
            amount = float(input("Введите сумму для снятия: "))
            account1.withdraw(amount)

        elif choice == "4":
             amount = float(input("Введите сумму для перевода: "))
             account1.transfer(amount, account2) # Перевод на другой счет

        elif choice == "5":
            print("До свидания!")
            break

        else:
            print("Попробуйте еще раз.")

if __name__ == "__main__":
  main()